#include <iostream>

using namespace std;

int main()
{
    char x ='A';
    cout<<(int) x;
    cout<<"\n";
    cout<<x+1;
    cout<<"\n";
    cout<<(char)x+1;
    cout<<endl;
    cout<<(char)(x+1);
    return 0;
}

OUTPUT:
65
66
66
B
//This program depicts the usage of cout in CPP

// Number system converstions in cpp
#include <iostream>

using namespace std;

int main()
{
    cout<<035<<"\n"; //While giving simply , value is defaultly converted into decimal
    cout<<0x41<<"\n";
    cout<<hex<<035<<"\n"; //when given particular number system, converted to that
    cout<<oct<<0x65;
}

OUTPUT:
29
65
1d
145

//It is number system conversion and not a datatype conversion. So if typecasting done as (hex) error will come
#include <iostream>

using namespace std;

int main()
{
    cout<<(hex)035;
    cout<<(oct)0x41;
}
// Any value to binary value conversion do not exist in CPP
#include <iostream>

using namespace std;

int main()
{
    cout<<bin<<23;
}
OUTPUT:
Compilation error occurs bcz any value to binary value con do not exist

// Relational operators in CPP
#include <iostream>

using namespace std;

int main()
{
    int a = 3;
    int b = 2;
    //cout<<a<<b; // It is not taking as left shift but prints as cout statements
    cout<<(a<<b);
    cout<<(a>b); 
    //cout<<a>b; // Error will occur
    //cout<<a>>b; // Error will occur
    return 0;
}
// Bitwise operators and logical operators in CPP
#include <iostream>

using namespace std;

int main()
{
    int a = 3;
    int b = 2;
    //cout<<a&b; // CE bcz it considers & as ref operator
    cout<<(a&b);
    cout<<endl;
    cout<<a&&b;// here it considers upto a only.
    cout<<endl;
    cout<<b||a;// here it considers upto a only.
    cout<<endl;
    cout<< (a&&b);
    cout<<endl;
    cout<< (a||b);
    cout<<"\n";
    a = 10;
    cout<<~a;
    return 0;
}
OUTPUT:
2
3
2
1
1
-11
